{"version":3,"sources":["components/gifDisplay.jsx","components/gifSearch.jsx","App.js","reportWebVitals.js","index.js"],"names":["display","props","src","url","alt","GifSearch","gifSearch","fetch","state","searchTerm","then","response","json","setState","urls","data","catch","error","console","handleChange","event","target","value","match","key","log","this","className","type","onChange","onClick","map","elem","index","images","original","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAaeA,EAVC,SAACC,GAEb,OAEI,8BACI,qBAAKC,IAAOD,EAAME,IAAKC,IAAK,MAGvC,ECuEcC,E,kDA5EX,WAAaJ,GAAQ,IAAD,8BAEhB,cAAOA,IAoBZK,UAAY,WAEPC,MAAM,0CAAD,OAA2C,EAAKC,MAAMC,WAAtD,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,MAAvB,IACLF,MAAK,SAACC,GAAc,EAAKE,SAAS,CAACC,KAAMH,EAASI,MAAO,IACzDC,OAAO,SAACC,GAAD,OAAWC,QAAQD,MAAMA,EAAzB,GACZ,EA5BoB,EA8BpBE,aAAe,SAACC,GACZ,EAAKP,SAAS,CACVJ,WAAYW,EAAMC,OAAOC,OAEhC,EA/BG,EAAKd,MAAQ,CAETC,WAAY,GACZK,KAAM,GACNS,OAAO,EACPC,IAAK,oCAGTN,QAAQO,IAAK,EAAKjB,MAAMM,MAXR,CAYnB,C,gEAEqB,IAAD,OAEjBP,MAAM,0CAAD,OAA2CmB,KAAKlB,MAAMC,WAAtD,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,MAAvB,IACLF,MAAK,SAACC,GAAc,EAAKE,SAAS,CAACC,KAAMH,EAASI,MAAO,IACzDC,OAAO,SAACC,GAAD,OAAWC,QAAQD,MAAMA,EAAzB,GACT,G,+BAkBC,OACI,sBAAKU,UAAU,SAAf,UACI,gCACI,8BACA,uBAAOA,UAAU,QAAjB,6CAEA,uBAAOA,UAAU,QAAjB,0BACA,uBACIA,UAAU,OACVC,KAAK,OACLC,SAAUH,KAAKP,aACfG,MAAQI,KAAKlB,MAAMC,gBAKvB,wBAAQkB,UAAU,SAASG,QAASJ,KAAKpB,UAAzC,oBAEJ,8BAEaoB,KAAKlB,MAAMM,KAAKiB,KAAI,SAACC,EAAMC,GACxB,OACA,cAAC,EAAD,CAEA9B,IAAO6B,EAAKE,OAAOC,SAAShC,KADvB8B,EAGR,QAMxB,K,GAxEmBG,aCOTC,MARf,WACE,OACA,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,KAGH,ECGcW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACT,GAEJ,ECJDO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,G","file":"static/js/main.7c52e8f7.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport React from 'react'\r\n\r\nconst display = (props) => {\r\n\r\n    return (\r\n\r\n        <div> \r\n            <img src = {props.url} alt =\"\"></img>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default display","import React, {Component} from 'react'\r\nimport GifDisplay from './gifDisplay'\r\n\r\n\r\nclass GifSearch extends Component {\r\n\r\n    constructor (props) {\r\n\r\n        super (props)\r\n        this.state = {\r\n            \r\n            searchTerm: \"\",\r\n            urls: [],\r\n            match: false,\r\n            key: 'AyuSIWGMSt6cQ5wox8Kp661mPyQzLONo'\r\n        }\r\n        \r\n        console.log (this.state.urls)\r\n    }\r\n\r\n    componentDidMount () {\r\n      \r\n        fetch(`https://api.giphy.com/v1/gifs/search?q=${this.state.searchTerm}&api_key=AyuSIWGMSt6cQ5wox8Kp661mPyQzLONo`)\r\n        .then((response) => response.json())\r\n        .then((response) => {this.setState({urls: response.data})})\r\n        .catch ((error) => console.error(error))\r\n      } \r\n\r\n   gifSearch = () => {\r\n\r\n        fetch(`https://api.giphy.com/v1/gifs/search?q=${this.state.searchTerm}&api_key=AyuSIWGMSt6cQ5wox8Kp661mPyQzLONo`)\r\n        .then((response) => response.json())\r\n        .then((response) => {this.setState({urls: response.data})})\r\n        .catch ((error) => console.error(error))\r\n   }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            searchTerm: event.target.value \r\n        })\r\n    }\r\n\r\n\r\n    render () { \r\n        return (\r\n            <div className=\"search\">\r\n                <div>\r\n                    <div>\r\n                    <label className=\"title\">Welcome to the World of Giphy</label>\r\n                   </div>\r\n                    <label className=\"label\">Search for: </label>\r\n                    <input\r\n                        className=\"text\"\r\n                        type=\"text\"\r\n                        onChange={this.handleChange}\r\n                        value= {this.state.searchTerm}\r\n                        >\r\n                    </input>\r\n                </div>   \r\n                   \r\n                    <button className=\"button\" onClick={this.gifSearch} >Search</button>\r\n                  \r\n                <div>\r\n                           \r\n                            {this.state.urls.map((elem, index) => {\r\n                                return (\r\n                                <GifDisplay \r\n                                key={index} \r\n                                url = {elem.images.original.url}/>\r\n                                )\r\n                            })} \r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default GifSearch","import './App.css';\r\nimport GifSearch from './components/gifSearch'\r\n\r\nfunction App() {\r\n  return (\r\n  <div className=\"App\">\r\n    <GifSearch />\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}